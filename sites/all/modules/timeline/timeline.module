<?php
// $Id: timeline.module,v 1.3.2.7.2.9 2008/07/05 19:02:23 jmiccolis Exp $

/**
 * @file
 * Module providing a scrollable timeline view for Drupal events and nodes.
 */

//////////////////////////////////////////////////////////////////////////////

define('TIMELINE_WIDTH',         variable_get('timeline_default_width', '100%'));
define('TIMELINE_HEIGHT',        variable_get('timeline_default_height', '400px'));
define('TIMELINE_ORIENTATION',   variable_get('timeline_default_orientation', 'VERTICAL'));
define('TIMELINE_INITIAL_DATE',  variable_get('timeline_initial_date', 'first'));
define('TIMELINE_FEED_LIFETIME', variable_get('timeline_feed_lifetime', 0));
define('TIMELINE_FEED_TYPE',     variable_get('timeline_feed_type', 'json'));
define('TIMELINE_WIDGET_URL',    variable_get('timeline_widget_url', 'sites/all/modules/timeline/api/timeline-api.js'));
define('TIMELINE_EVENT_LINK',    variable_get('timeline_event_link', FALSE));

//////////////////////////////////////////////////////////////////////////////

define('TIMELINE_ISO_DATE',      '/^([\d]{4})-([\d]{2})-([\d]{2})T([\d]{2}):([\d]{2}):([\d]{2})/');

require_once dirname(__FILE__) . '/timeline.theme.inc';

//////////////////////////////////////////////////////////////////////////////
// DRUPAL API HOOKS

/**
 * Implementation of hook_help(). Provides online user help.
 */
function timeline_help($section) {
  switch ($section) {
    case 'admin/modules#name':
      return t('timeline');
    case 'admin/modules#description':
      return t('Provides a draggable and scrollable timeline view. Requires the views module and makes use of the events module if available.');
    case 'admin/build/timelines':
      return t('<p>Timeline views provide a draggable and scrollable widget for visualizing temporal information. This screen allows you to override default settings for each timeline. To actually create and manage timelines, use the <a href="!views">views administration</a> screen.</p>', array('!views' => url('admin/build/views')));
  }
}

/**
 * Implementation of hook_perm(). Defines user permissions.
 */
function timeline_perm() {
  return array('administer timelines');
}

/**
 * Implementation of hook_menu(). Defines menu items and page callbacks.
 */
function timeline_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path'     => 'admin/settings/timeline',
      'title'    => t('Timeline'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('timeline_admin_settings'),
      'access'   => user_access('administer site configuration'),
      'type'     => MENU_NORMAL_ITEM, // optional
    );
    $items[] = array(
      'path'     => 'admin/build/timelines',
      'title'    => t('Timelines'),
      'callback' => 'timeline_admin',
      'access'   => user_access('administer timelines'),
      'description' => t('Override default settings for each timeline.')
    );
    $items[] = array(
      'path'     => 'admin/build/timelines/list',
      'title'    => t('list'),
      'type'     => MENU_DEFAULT_LOCAL_TASK,
      'weight'   => -10,
    );
    $items[] = array(
      'path'     => 'admin/build/timelines/add',
      'title'    => t('add timeline'),
      'callback' => 'timeline_admin_create',
      'access'   => user_access('administer timelines'),
      'type'     => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path'     => 'admin/build/timelines/edit',
      'title'    => t('configure timeline'),
      'callback' => 'timeline_admin_form',
      'access'   => user_access('administer timelines'),
      'type'     => MENU_CALLBACK,
    );
    $items[] = array(
      'path'     => 'timeline/json',
      'title'    => '',
      'callback' => 'timeline_data_json',
      'access'   => user_access('access content'),
      'type'     => MENU_CALLBACK,
    );
    $items[] = array(
      'path'     => 'timeline/xml',
      'title'    => '',
      'callback' => 'timeline_data_xml',
      'access'   => user_access('access content'),
      'type'     => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_link().
 */
function timeline_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if (TIMELINE_EVENT_LINK) {
    if (in_array($type, array('event_month', 'event_week', 'event_day', 'event_table', 'event_list'))) {
      if (user_access('access content')) {
        $links['timeline'] = array(
          'title' => t('Timeline'), 
          'href' => 'timeline/events', 
          'attributes' => array('title' => t('Timeline view')),
        );                                                                                                                               
      }
    }
  }
  return $links;
}

/**
 * Declares administrative settings for the module.
 */
function timeline_admin_settings() {
  // Display settings
  $form['display'] = array('#type' => 'fieldset', '#title' => t('Display settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['display']['timeline_default_width'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Default width'),
    '#default_value' => TIMELINE_WIDTH,
    '#size'          => 25,
    '#maxlength'     => 6,
    '#description'   => t('The default width of a timeline (in units of em, px or %), e.g. 600px or 90%.'),
  );
  $form['display']['timeline_default_height'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Default height'),
    '#default_value' => TIMELINE_HEIGHT,
    '#size'          => 25,
    '#maxlength'     => 6,
    '#description'   => t('The default height of a timeline (in units of em, px or %), e.g. 400px.'),
  );
  $form['display']['timeline_initial_date'] = array(
    '#type'          => 'select',
    '#title'         => t('Initial date focus'),
    '#default_value' => TIMELINE_INITIAL_DATE,
    '#options'       => array('first' => t('First event in timeline'), 'last' => t('Last event in timeline'), 'today' => t('The current date')),
    '#description'   => t('Determines which event or date the timeline views should initially be centered on after they have loaded.'),
  );

  // Cache settings
  $form['caching'] = array('#type' => 'fieldset', '#title' => t('Cache settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = t('none');
  $form['caching']['timeline_feed_lifetime'] = array(
    '#type'          => 'select',
    '#title'         => t('Data feed cache lifetime on client'),
    '#default_value' => TIMELINE_FEED_LIFETIME,
    '#options'       => $period,
    '#description'   => t('Determines whether to send HTTP expiry and cache control headers for timeline data feeds, allowing them to be cached in the user\'s browser for a pre-determined time. This can speed up timeline loading on the client and reduce load on the server, at the cost of potentially stale timeline data. Note that this is currently entirely a client-side setting; the timeline feeds are not cached on the server.'),
  );

  // Advanced settings
  $form['advanced'] = array('#type' => 'fieldset', '#title' => t('Advanced settings'), '#collapsible' => TRUE, '#collapsed' => TRUE);
  $form['advanced']['timeline_feed_type'] = array(
    '#type'          => 'radios',
    '#title'         => t('Data feed type'),
    '#options'       => array('json' => t('JSON'), 'xml' => t('XML')),
    '#default_value' => TIMELINE_FEED_TYPE,
    '#description'   => t('Whether the widget should load event data using JSON or XML. You will normally want to use JSON as it is more lightweight on both server and client. Only specify XML if JSON is giving you trouble for some reason.'),
  );
  $form['advanced']['timeline_widget_url'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Widget URL'),
    '#default_value' => TIMELINE_WIDGET_URL,
    '#size'          => 60,
    '#maxlength'     => 255,
    '#description'   => t('Path to the Simile Timeline widget\'s JavaScript initialization file (timeline-api.js). You can specify a relative path such as <em>sites/all/modules/timeline/api/timeline-api.js</em>.'),
  );

  // Event module integration
  if (module_exists('event')) {
    $form['event'] = array('#type' => 'fieldset', '#title' => t('Event module integration'), '#collapsible' => TRUE, '#collapsed' => TRUE);
    $form['event']['timeline_event_link'] = array(
      '#type'          => 'radios',
      '#title'         => t('Provide timeline tab'),
      '#default_value' => TIMELINE_EVENT_LINK,
      '#options'       => array(FALSE => t('Disabled'), TRUE => t('Enabled')),
      '#description'   => t('Adds a timeline tab to the <a href="%calendar">calendar view</a> provided by the Event module, with a link to the <a href="%timeline">timeline/events</a> timeline view.', array('%calendar' => url('event'), '%timeline' => url('timeline/events'))),
    );
  }

  return system_settings_form($form);
}

//////////////////////////////////////////////////////////////////////////////
// ADMINISTRATION

/**
 *
 */
function timeline_variable_get($vid, $mode, $field, $default = NULL) {
  $settings = variable_get('timeline_' . $mode . '_' . $vid, (object)array());
  return !empty($settings->$field) ? $settings->$field : $default;
}

/**
 *
 */
function timeline_admin() {
  $header = array(t('View'), t('Title'), t('Mode'), t('Orientation'), t('URL'), t('Operations'));

  $result = pager_query("SELECT vid, name, page, page_title, page_type, block, block_title, block_type, url FROM {view_view} WHERE page_type LIKE 'timeline_%' OR block_type LIKE 'timeline_%' ORDER BY name", 50);
  $rows = array();
  while ($view = db_fetch_object($result)) {
    if (!empty($view->page))
      $rows[] = _timeline_admin_get_row($view, 'page');
    if (!empty($view->block))
      $rows[] = _timeline_admin_get_row($view, 'block');
  }

  if (empty($rows)) {
    $rows[] = array(array('data' => t('No timelines available.'), 'colspan' => '6'));
  }

  return theme('table', $header, $rows) . theme('pager', NULL, 50, 0);
}

/**
 *
 */
function _timeline_admin_get_row($view, $mode = 'block') {
  $type_field = $mode . '_type';
  return array(
    l($view->name, "admin/build/views/$view->name/edit"),
    views_get_title($view, $mode),
    $mode == 'block' ? t('Block') : t('Page'),
    ucwords(substr(strstr($view->$type_field, '_'), 1)),
    $mode == 'block' ? '' : l($view->url, $view->url),
    l(t('settings'), "admin/build/timelines/edit/$view->vid/$mode"),
  );
}

/**
 *
 */
function timeline_admin_create() {
  drupal_goto('admin/build/views/add/timeline_nodes');
}

/**
 *
 */
function timeline_admin_form() {
  return drupal_get_form('timeline_form', arg(4), arg(5));
}

/**
 *
 */
function timeline_form($vid, $mode) {
  $form = array();
  $form['vid']  = array('#type' => 'hidden', '#value' => $vid);
  $form['mode'] = array('#type' => 'hidden', '#value' => $mode);

  // Display settings
  $form['display'] = array('#type' => 'fieldset', '#title' => t('Display settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['display']['width'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Width'),
    '#default_value' => timeline_variable_get($vid, $mode, 'width', TIMELINE_WIDTH),
    '#size'          => 25,
    '#maxlength'     => 6,
    '#description'   => t('The width of the timeline (in units of em, px or %), e.g. 600px or 90%. Leave blank to use default value.'),
  );
  $form['display']['height'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Height'),
    '#default_value' => timeline_variable_get($vid, $mode, 'height', TIMELINE_HEIGHT),
    '#size'          => 25,
    '#maxlength'     => 6,
    '#description'   => t('The height of the timeline (in units of em, px or %), e.g. 400px. Leave blank to use default value.'),
  );
  $form['display']['focus'] = array(
    '#type'          => 'select',
    '#title'         => t('Initial date focus'),
    '#default_value' => timeline_variable_get($vid, $mode, 'focus', TIMELINE_INITIAL_DATE),
    '#options'       => array('' => '', 'first' => t('First event in timeline'), 'last' => t('Last event in timeline'), 'today' => t('The current date')),
    '#description'   => t('Determines which event or date the timeline view should initially be centered on after it has loaded. Leave blank to use default value.'),
  );

  // Band/interval settings
  $form['bands'] = array('#type' => 'fieldset', '#title' => t('Band/interval settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $intervals = array('' => '', 'second' => t('Second'), 'minute' => t('Minute'), 'hour' => t('Hour'), 'day' => t('Day'), 'week' => t('Week'), 'month' => t('Month'), 'year' => t('Year'), 'decade' => t('Decade'), 'century' => t('Century'), 'millennium' => t('Millennium'));
  $form['bands']['band1_unit'] = array(
    '#type'          => 'select',
    '#title'         => t('Upper band interval unit'),
    '#default_value' => timeline_variable_get($vid, $mode, 'band1_unit', 'day'),
    '#options'       => $intervals,
    '#description'   => t(''),
  );
  $form['bands']['band2_unit'] = array(
    '#type'          => 'select',
    '#title'         => t('Lower band interval unit'),
    '#default_value' => timeline_variable_get($vid, $mode, 'band2_unit', 'month'),
    '#options'       => $intervals,
    '#description'   => t(''),
  );

  // Miscellanous settings
  $form['misc'] = array('#type' => 'fieldset', '#title' => t('Miscellaneous settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['misc']['controls'] = array(
    '#type'          => 'radios',
    '#title'         => t('Enable controls'),
    '#default_value' => timeline_variable_get($vid, $mode, 'controls', FALSE),
    '#options'       => array(FALSE => t('Disabled'), TRUE => t('Enabled')),
    '#description'   => t('Whether to display filtering and highlighting controls under the timeline. Not recommended for block mode.'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save timeline settings'));
  return $form;
}

/**
 *
 */
function timeline_form_submit() {
  $fields = array('width', 'height', 'focus', 'band1_unit', 'band2_unit', 'controls');
  $values = $GLOBALS['form_values'];
  $config = array();
  foreach ($fields as $field) {
    // Convert empty strings to NULLs
    $config[$field] = !empty($values[$field]) ? $values[$field] : NULL;
  }
  $config['controls'] = !empty($values['controls']); // -> boolean
  variable_set('timeline_' . $values['mode'] . '_' . $values['vid'], (object)$config);

  drupal_set_message(t('Timeline view settings updated.'));
  return 'admin/build/timelines';
}

//////////////////////////////////////////////////////////////////////////////
// SIMPLETEST API HOOKS

/**
 * Implementation of hook_simpletest(). Returns a list of unit tests.
 */
function timeline_simpletest() {
  return array_keys(file_scan_directory(drupal_get_path('module', 'timeline') . '/tests', '\.test$'));
}

//////////////////////////////////////////////////////////////////////////////
// VIEWS API HOOKS

/**
 * Implementation of hook_views_default_views().
 */
function timeline_views_default_views() {
  require_once dirname(__FILE__) . '/timeline.views.inc';
  return _timeline_views_default_views();
}

/**
 * Implementation of hook_views_style_plugins(). Adds view types to views UI interface.
 */
function timeline_views_style_plugins() {
  require_once dirname(__FILE__) . '/timeline.views.inc';
  return _timeline_views_style_plugins();
}

//////////////////////////////////////////////////////////////////////////////
// TIMELINE MENU ACTIONS

/**
 * Outputs the timeline data feed for a Drupal view in JSON format.
 *
 * Expects the view name to be passed as the 'view' request parameter.
 */
function timeline_data_json() {
  if ($view = views_get_view($_REQUEST['view'])) {
    _timeline_set_headers('application/json');

    $view_args = empty($_REQUEST['args']) ? array() : unserialize($_REQUEST['args']);
    $events = timeline_data($view, $view_args);

    print drupal_to_js(array('dateTimeFormat' => 'iso8601', 'events' => $events));
    die(); // Prevent other modules (e.g. devel.module) from interfering with our output
  }

  drupal_not_found();
}

/**
 * Outputs the timeline data feed for a Drupal view in XML format.
 *
 * Expects the view name to be passed as the 'view' request parameter.
 */
function timeline_data_xml() {
  if ($view = views_get_view($_REQUEST['view'])) {
    _timeline_set_headers('text/xml');

    $view_args = empty($_REQUEST['args']) ? array() : unserialize($_REQUEST['args']);
    $events = timeline_data($view, $view_args);

    $elements = array();
    foreach ($events as $event) {
      $description = $event['description'];
      unset($event['description']);
      $elements[] = array(
        'key'        => 'event',
        'value'      => $description,
        'attributes' => $event,
      );
    }
    $attributes = array('date-time-format' => 'iso8601');

    // Fix for bug in Drupal 4.7.3 (see http://drupal.org/node/79733)
    if (!function_exists('format_xml_tags')) {
      function format_xml_tags($array) { return format_xml_elements($array); }
    }

    print '<' . '?xml version="1.0" encoding="utf-8"?>' . "\n";
    print format_xml_elements(array(array('key' => 'data', 'attributes' => $attributes, 'value' => $elements)));
    die(); // Prevent other modules (e.g. devel.module) from interfering with our output
  }

  drupal_not_found();
}

/**
 * Outputs HTTP headers for a timeline data feed.
 *
 * Handles setting the Content-Type header as well as any needed cache
 * control directives.
 *
 * @param $content_type the MIME content type to set
 */
function _timeline_set_headers($content_type) {
  drupal_set_header('Content-Type: ' . $content_type . '; charset=utf-8');

  if ((int)TIMELINE_FEED_LIFETIME > 0) {
    drupal_set_header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
    $expires = time() + TIMELINE_FEED_LIFETIME;
    drupal_set_header('Expires: ' . gmdate('D, d M Y H:i:s', $expires) . ' GMT');
    drupal_set_header('Cache-Control: max-age=' . TIMELINE_FEED_LIFETIME . ', private, must-revalidate');
    drupal_set_header('Pragma: cache'); // Need to override no-cache set by Drupal.
  }
}

//////////////////////////////////////////////////////////////////////////////
// TIMELINE API IMPLEMENTATION

/**
 * Returns the data feed for a Drupal timeline view.
 *
 * @param $view      Drupal view object
 * @param $view_args associative array of additional view arguments
 * @param $teasers   boolean indicating whether node teasers will be included
 * @param $links     boolean indicating whether node links will be included
 *
 * @return an associative array of timeline events
 */
function timeline_data($view, $view_args = array(), $teasers = TRUE, $links = TRUE) {
  $items = (object)views_build_view('items', $view, $view_args, FALSE, $view->nodes_per_page);

  // Check if this is an event field and get start and end.
  if (isset($items->items[0]->event_event_start) || isset($items->items[0]->event_event_end)) {
    $start_field = 'event_event_start';
    $end_field = 'event_event_end';
  }
  else {
    // Tentative start field
    $start_field = !empty($view->field[0]['field']) ? $view->field[0]['queryname'] : NULL;
    // Check if this is a date field and get start and end.
    $date_to = $start_field.'2';
    if(isset($items->items[0]->$date_to)){
      $end_field = $view->field[0]['queryname'].'2';
    }
    // All other fields have the same start and end.
    else {
      $end_field = NULL;
    }
  }

  $title_field = isset($view->field[1]['field']) ? $view->field[1]['queryname'] : NULL;
  $body_field = isset($view->field[2]['field']) ? $view->field[2]['queryname'] : NULL;
  $format_field = isset($body_field) ? preg_replace('/_value$/', '_format', $body_field) : NULL;

  $events = array();
  foreach ($items->items as $item) {
    $node = node_load(array('nid' => $item->nid));

    $start_value = !empty($start_field) && !empty($item->$start_field) ? $item->$start_field : $node->created;
    $end_value = !empty($end_field) && !empty($item->$end_field) ? $item->$end_field : NULL;
    $title_value = !empty($title_field) && !empty($item->$title_field) ? $item->$title_field : $node->title;
    $body_value = !empty($body_field) && !empty($item->$body_field) ? $item->$body_field : $node->teaser;
    $body_format = !empty($format_field) && !empty($item->$format_field) ? $item->$format_field : $node->format;

    $event = array(
      'title'       => $title_value,
      'link'        => url('node/' . $node->nid),
      'start'       => timeline_format_iso8601_date($start_value),
      'end'         => $end_value ? timeline_format_iso8601_date($end_value) : NULL,
      //'isDuration'  => $end_value ? 'true' : 'false', // NOTE: broken with JSON when explicit
      'description' => check_markup($body_value, $body_format, FALSE),
    );
    if (is_null($event['end']) || $event['start'] == $event['end']) unset($event['end']);
    $events[] = $event;
  }
  return $events;
}

/**
 * Returns the currently logged-in user's timezone, in seconds from GMT.
 *
 * @return an integer representation of a timezone
 */
function timeline_get_timezone() {
  global $user;
  return (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) ?
    (integer)$user->timezone : (integer)variable_get('date_default_timezone', 0);
}

/**
 * Formats a timestamp into the ISO-8601 date format expected by the
 * timeline widget, taking into account the current user's timezone.
 *
 * @return a string containing a timestamp in ISO-8601 format
 */
function timeline_format_iso8601_date($timestamp) {
  // Check if the given argument is already a string in the required format;
  // this would at present only be the case with values from CCK fields
  // based on the Date module.
  if (preg_match(TIMELINE_ISO_DATE, $timestamp)) {
    return $timestamp;
  }

  // FIXME: currently, the timeline widget wholly ignores the timezone of
  // supplied dates, which means we have to fiddle with them to output the
  // dates as if they were UTC, when they are in fact explicitly adjusted to
  // the current user's timezone. Until the situation is remedied upstream
  // in the SIMILE widget itself, mess with this hack at your own peril.
  $timestamp = is_numeric($timestamp) ? (integer)$timestamp : strtotime($timestamp);

  // Make sure that datestamps with historical dates get properly formatted.
  $date = function_exists('adodb_date') ? 'adodb_date' : 'date';
  return $date('Y-m-d\TH:i:s\Z', $timestamp - timeline_get_timezone());
}

/**
 * @return a string in the format "Thu Jan 01 1970 1:00:00 GMT+0100"
 */
function timeline_format_initial_date($timestamp) {
  return _timeline_date('D M d Y G:i:s', $timestamp) . ' GMT' . _timeline_date('O', $timestamp);
}

//////////////////////////////////////////////////////////////////////////////
// EXTENDED DATE HELPERS (for pre-1970 dates)

_timeline_load_extended_dates();

function _timeline_load_extended_dates() {
  if (!function_exists('adodb_date_test_date')) {
    $adodb_file = 'adodb-time.inc.php';
    $adodb_path = module_exists('date') ?
      drupal_get_path('module', 'date') . '/' . $adodb_file :
      drupal_get_path('module', 'timeline') . '/' . $adodb_file;
    if (file_exists($adodb_path)) {
      include_once($adodb_path);
    }
  }
}

function _timeline_date($format, $timestamp = FALSE) {
  $date = function_exists('adodb_date') ? 'adodb_date' : 'date';
  return $date($format, $timestamp);
}

function _timeline_gmdate($format, $timestamp = FALSE) {
  $gmdate = function_exists('adodb_gmdate') ? 'adodb_gmdate' : 'gmdate';
  return $gmdate($format, $timestamp);
}

function _timeline_strtotime($time) {
  if (function_exists('adodb_gmmktime') && preg_match(TIMELINE_ISO_DATE, $time, $matches)) {
    $args = array_map('intval', array_slice($matches, 1));
    $args = array_merge(array_slice($args, 3), array_slice($args, 1, 2), array_slice($args, 0, 1));
    return call_user_func_array('adodb_gmmktime', $args);
  }
  return strtotime($time);
}
